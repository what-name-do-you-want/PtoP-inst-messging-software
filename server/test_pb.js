// source: test.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AddFriend', null, global);
goog.exportSymbol('proto.AddFriend.AToServer', null, global);
goog.exportSymbol('proto.AddFriend.BToServer', null, global);
goog.exportSymbol('proto.AddFriendFromOther', null, global);
goog.exportSymbol('proto.AddFriendFromOther.Rsp', null, global);
goog.exportSymbol('proto.AddFriendFromSelf', null, global);
goog.exportSymbol('proto.AddFriendFromSelf.Rsp', null, global);
goog.exportSymbol('proto.AddFriendFromSelf.Rsp.RequestFromSelf', null, global);
goog.exportSymbol('proto.ChangeHeadpic', null, global);
goog.exportSymbol('proto.ChangeHeadpic.RelayToFriend', null, global);
goog.exportSymbol('proto.ChangeHeadpic.Req', null, global);
goog.exportSymbol('proto.ChangeHeadpic.Rsp', null, global);
goog.exportSymbol('proto.ChangeName', null, global);
goog.exportSymbol('proto.ChangeName.RelayToFriend', null, global);
goog.exportSymbol('proto.ChangeName.Req', null, global);
goog.exportSymbol('proto.ChangeName.Rsp', null, global);
goog.exportSymbol('proto.ChangePassword', null, global);
goog.exportSymbol('proto.ChangePassword.Req', null, global);
goog.exportSymbol('proto.ChangePassword.Rsp', null, global);
goog.exportSymbol('proto.ChatRecord', null, global);
goog.exportSymbol('proto.ChatRecord.Req', null, global);
goog.exportSymbol('proto.ChatRecord.Rsp', null, global);
goog.exportSymbol('proto.ChatRecord.Rsp.Msg', null, global);
goog.exportSymbol('proto.ChatWithServer', null, global);
goog.exportSymbol('proto.ChatWithServer.Relay', null, global);
goog.exportSymbol('proto.ChatWithServer.Req', null, global);
goog.exportSymbol('proto.DeleteFriend', null, global);
goog.exportSymbol('proto.DeleteFriend.AToServer', null, global);
goog.exportSymbol('proto.DeleteFriend.ServerToB', null, global);
goog.exportSymbol('proto.Error', null, global);
goog.exportSymbol('proto.Error.Error_type', null, global);
goog.exportSymbol('proto.FriendList', null, global);
goog.exportSymbol('proto.FriendList.Req', null, global);
goog.exportSymbol('proto.FriendList.Rsp', null, global);
goog.exportSymbol('proto.GetToken', null, global);
goog.exportSymbol('proto.GetToken.Req', null, global);
goog.exportSymbol('proto.GetToken.Res', null, global);
goog.exportSymbol('proto.HeartBeat', null, global);
goog.exportSymbol('proto.HeartBeat.Req', null, global);
goog.exportSymbol('proto.HeartBeat.Res', null, global);
goog.exportSymbol('proto.Login', null, global);
goog.exportSymbol('proto.Login.Req', null, global);
goog.exportSymbol('proto.Login.Res', null, global);
goog.exportSymbol('proto.PToP', null, global);
goog.exportSymbol('proto.PToP.AS2Req', null, global);
goog.exportSymbol('proto.PToP.S1Rsp', null, global);
goog.exportSymbol('proto.PToP.S2ARsp', null, global);
goog.exportSymbol('proto.PToP.S2BRelay', null, global);
goog.exportSymbol('proto.PToP.S2InfoRelay', null, global);
goog.exportSymbol('proto.PToP.S2InfoReq', null, global);
goog.exportSymbol('proto.People', null, global);
goog.exportSymbol('proto.Register', null, global);
goog.exportSymbol('proto.Register.Req', null, global);
goog.exportSymbol('proto.Register.Res', null, global);
goog.exportSymbol('proto.ReqToServer', null, global);
goog.exportSymbol('proto.ReqToServer.ReqCase', null, global);
goog.exportSymbol('proto.RspToClient', null, global);
goog.exportSymbol('proto.RspToClient.RspCase', null, global);
goog.exportSymbol('proto.SearchUser', null, global);
goog.exportSymbol('proto.SearchUser.Req', null, global);
goog.exportSymbol('proto.SearchUser.Res', null, global);
goog.exportSymbol('proto.Seen', null, global);
goog.exportSymbol('proto.Seen.AToServer', null, global);
goog.exportSymbol('proto.Seen.ServerToB', null, global);
goog.exportSymbol('proto.Seen.ServerToB.SeenInfo', null, global);
goog.exportSymbol('proto.UnreceivedMsg', null, global);
goog.exportSymbol('proto.UnreceivedMsg.Res', null, global);
goog.exportSymbol('proto.UnreceivedMsg.Res.Msg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.displayName = 'proto.PToP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP.S1Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP.S1Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.S1Rsp.displayName = 'proto.PToP.S1Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP.AS2Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP.AS2Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.AS2Req.displayName = 'proto.PToP.AS2Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP.S2ARsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP.S2ARsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.S2ARsp.displayName = 'proto.PToP.S2ARsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP.S2BRelay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP.S2BRelay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.S2BRelay.displayName = 'proto.PToP.S2BRelay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP.S2InfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP.S2InfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.S2InfoReq.displayName = 'proto.PToP.S2InfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PToP.S2InfoRelay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PToP.S2InfoRelay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PToP.S2InfoRelay.displayName = 'proto.PToP.S2InfoRelay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.People = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.People, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.People.displayName = 'proto.People';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddFriend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriend.displayName = 'proto.AddFriend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriend.AToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddFriend.AToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriend.AToServer.displayName = 'proto.AddFriend.AToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriend.BToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddFriend.BToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriend.BToServer.displayName = 'proto.AddFriend.BToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriendFromOther = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddFriendFromOther, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriendFromOther.displayName = 'proto.AddFriendFromOther';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriendFromOther.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AddFriendFromOther.Rsp.repeatedFields_, null);
};
goog.inherits(proto.AddFriendFromOther.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriendFromOther.Rsp.displayName = 'proto.AddFriendFromOther.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriendFromSelf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddFriendFromSelf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriendFromSelf.displayName = 'proto.AddFriendFromSelf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriendFromSelf.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AddFriendFromSelf.Rsp.repeatedFields_, null);
};
goog.inherits(proto.AddFriendFromSelf.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriendFromSelf.Rsp.displayName = 'proto.AddFriendFromSelf.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddFriendFromSelf.Rsp.RequestFromSelf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddFriendFromSelf.Rsp.RequestFromSelf.displayName = 'proto.AddFriendFromSelf.Rsp.RequestFromSelf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Register.displayName = 'proto.Register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Register.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Register.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Register.Req.displayName = 'proto.Register.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Register.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Register.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Register.Res.displayName = 'proto.Register.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Login.displayName = 'proto.Login';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Login.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Login.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Login.Req.displayName = 'proto.Login.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Login.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Login.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Login.Res.displayName = 'proto.Login.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendList.displayName = 'proto.FriendList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendList.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendList.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendList.Req.displayName = 'proto.FriendList.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendList.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FriendList.Rsp.repeatedFields_, null);
};
goog.inherits(proto.FriendList.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendList.Rsp.displayName = 'proto.FriendList.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UnreceivedMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UnreceivedMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UnreceivedMsg.displayName = 'proto.UnreceivedMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UnreceivedMsg.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UnreceivedMsg.Res.repeatedFields_, null);
};
goog.inherits(proto.UnreceivedMsg.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UnreceivedMsg.Res.displayName = 'proto.UnreceivedMsg.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UnreceivedMsg.Res.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UnreceivedMsg.Res.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UnreceivedMsg.Res.Msg.displayName = 'proto.UnreceivedMsg.Res.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartBeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HeartBeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartBeat.displayName = 'proto.HeartBeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartBeat.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HeartBeat.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartBeat.Req.displayName = 'proto.HeartBeat.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartBeat.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HeartBeat.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HeartBeat.Res.displayName = 'proto.HeartBeat.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetToken.displayName = 'proto.GetToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetToken.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetToken.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetToken.Req.displayName = 'proto.GetToken.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetToken.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetToken.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetToken.Res.displayName = 'proto.GetToken.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SearchUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SearchUser.displayName = 'proto.SearchUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchUser.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SearchUser.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SearchUser.Req.displayName = 'proto.SearchUser.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SearchUser.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SearchUser.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SearchUser.Res.displayName = 'proto.SearchUser.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatWithServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatWithServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatWithServer.displayName = 'proto.ChatWithServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatWithServer.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatWithServer.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatWithServer.Req.displayName = 'proto.ChatWithServer.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatWithServer.Relay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatWithServer.Relay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatWithServer.Relay.displayName = 'proto.ChatWithServer.Relay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangePassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangePassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangePassword.displayName = 'proto.ChangePassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangePassword.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangePassword.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangePassword.Req.displayName = 'proto.ChangePassword.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangePassword.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangePassword.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangePassword.Rsp.displayName = 'proto.ChangePassword.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeName.displayName = 'proto.ChangeName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeName.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeName.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeName.Req.displayName = 'proto.ChangeName.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeName.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeName.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeName.Rsp.displayName = 'proto.ChangeName.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeName.RelayToFriend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeName.RelayToFriend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeName.RelayToFriend.displayName = 'proto.ChangeName.RelayToFriend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeHeadpic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeHeadpic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeHeadpic.displayName = 'proto.ChangeHeadpic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeHeadpic.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeHeadpic.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeHeadpic.Req.displayName = 'proto.ChangeHeadpic.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeHeadpic.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeHeadpic.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeHeadpic.Rsp.displayName = 'proto.ChangeHeadpic.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeHeadpic.RelayToFriend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChangeHeadpic.RelayToFriend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChangeHeadpic.RelayToFriend.displayName = 'proto.ChangeHeadpic.RelayToFriend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteFriend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteFriend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteFriend.displayName = 'proto.DeleteFriend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteFriend.AToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteFriend.AToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteFriend.AToServer.displayName = 'proto.DeleteFriend.AToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteFriend.ServerToB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeleteFriend.ServerToB.repeatedFields_, null);
};
goog.inherits(proto.DeleteFriend.ServerToB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeleteFriend.ServerToB.displayName = 'proto.DeleteFriend.ServerToB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatRecord.displayName = 'proto.ChatRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRecord.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRecord.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatRecord.Req.displayName = 'proto.ChatRecord.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRecord.Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatRecord.Rsp.repeatedFields_, null);
};
goog.inherits(proto.ChatRecord.Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatRecord.Rsp.displayName = 'proto.ChatRecord.Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatRecord.Rsp.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatRecord.Rsp.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatRecord.Rsp.Msg.displayName = 'proto.ChatRecord.Rsp.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Seen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Seen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Seen.displayName = 'proto.Seen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Seen.AToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Seen.AToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Seen.AToServer.displayName = 'proto.Seen.AToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Seen.ServerToB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Seen.ServerToB.repeatedFields_, null);
};
goog.inherits(proto.Seen.ServerToB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Seen.ServerToB.displayName = 'proto.Seen.ServerToB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Seen.ServerToB.SeenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Seen.ServerToB.SeenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Seen.ServerToB.SeenInfo.displayName = 'proto.Seen.ServerToB.SeenInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Error.displayName = 'proto.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReqToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ReqToServer.oneofGroups_);
};
goog.inherits(proto.ReqToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReqToServer.displayName = 'proto.ReqToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RspToClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RspToClient.oneofGroups_);
};
goog.inherits(proto.RspToClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RspToClient.displayName = 'proto.RspToClient';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP}
 */
proto.PToP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP;
  return proto.PToP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP}
 */
proto.PToP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.S1Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.S1Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP.S1Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S1Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, 0),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP.S1Rsp}
 */
proto.PToP.S1Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP.S1Rsp;
  return proto.PToP.S1Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP.S1Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP.S1Rsp}
 */
proto.PToP.S1Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.S1Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.S1Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP.S1Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S1Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 ip = 1;
 * @return {number}
 */
proto.PToP.S1Rsp.prototype.getIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S1Rsp} returns this
 */
proto.PToP.S1Rsp.prototype.setIp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.PToP.S1Rsp.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S1Rsp} returns this
 */
proto.PToP.S1Rsp.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.AS2Req.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.AS2Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP.AS2Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.AS2Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    bid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP.AS2Req}
 */
proto.PToP.AS2Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP.AS2Req;
  return proto.PToP.AS2Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP.AS2Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP.AS2Req}
 */
proto.PToP.AS2Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.AS2Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.AS2Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP.AS2Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.AS2Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 bid = 1;
 * @return {number}
 */
proto.PToP.AS2Req.prototype.getBid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.AS2Req} returns this
 */
proto.PToP.AS2Req.prototype.setBid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.PToP.AS2Req.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PToP.AS2Req} returns this
 */
proto.PToP.AS2Req.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.S2ARsp.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.S2ARsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP.S2ARsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2ARsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    offline: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP.S2ARsp}
 */
proto.PToP.S2ARsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP.S2ARsp;
  return proto.PToP.S2ARsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP.S2ARsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP.S2ARsp}
 */
proto.PToP.S2ARsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffline(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.S2ARsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.S2ARsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP.S2ARsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2ARsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffline();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool offline = 1;
 * @return {boolean}
 */
proto.PToP.S2ARsp.prototype.getOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PToP.S2ARsp} returns this
 */
proto.PToP.S2ARsp.prototype.setOffline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.PToP.S2ARsp.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2ARsp} returns this
 */
proto.PToP.S2ARsp.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.S2BRelay.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.S2BRelay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP.S2BRelay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2BRelay.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP.S2BRelay}
 */
proto.PToP.S2BRelay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP.S2BRelay;
  return proto.PToP.S2BRelay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP.S2BRelay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP.S2BRelay}
 */
proto.PToP.S2BRelay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.S2BRelay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.S2BRelay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP.S2BRelay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2BRelay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.PToP.S2BRelay.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2BRelay} returns this
 */
proto.PToP.S2BRelay.prototype.setAid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.S2InfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.S2InfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP.S2InfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2InfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    s1ip: jspb.Message.getFieldWithDefault(msg, 2, 0),
    s1port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    token: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP.S2InfoReq}
 */
proto.PToP.S2InfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP.S2InfoReq;
  return proto.PToP.S2InfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP.S2InfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP.S2InfoReq}
 */
proto.PToP.S2InfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setS1ip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setS1port(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.S2InfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.S2InfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP.S2InfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2InfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getS1ip();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getS1port();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PToP.S2InfoReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoReq} returns this
 */
proto.PToP.S2InfoReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 s1ip = 2;
 * @return {number}
 */
proto.PToP.S2InfoReq.prototype.getS1ip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoReq} returns this
 */
proto.PToP.S2InfoReq.prototype.setS1ip = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 s1port = 3;
 * @return {number}
 */
proto.PToP.S2InfoReq.prototype.getS1port = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoReq} returns this
 */
proto.PToP.S2InfoReq.prototype.setS1port = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.PToP.S2InfoReq.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PToP.S2InfoReq} returns this
 */
proto.PToP.S2InfoReq.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PToP.S2InfoRelay.prototype.toObject = function(opt_includeInstance) {
  return proto.PToP.S2InfoRelay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PToP.S2InfoRelay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2InfoRelay.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PToP.S2InfoRelay}
 */
proto.PToP.S2InfoRelay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PToP.S2InfoRelay;
  return proto.PToP.S2InfoRelay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PToP.S2InfoRelay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PToP.S2InfoRelay}
 */
proto.PToP.S2InfoRelay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PToP.S2InfoRelay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PToP.S2InfoRelay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PToP.S2InfoRelay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PToP.S2InfoRelay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PToP.S2InfoRelay.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoRelay} returns this
 */
proto.PToP.S2InfoRelay.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 ip = 2;
 * @return {number}
 */
proto.PToP.S2InfoRelay.prototype.getIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoRelay} returns this
 */
proto.PToP.S2InfoRelay.prototype.setIp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.PToP.S2InfoRelay.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoRelay} returns this
 */
proto.PToP.S2InfoRelay.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 mode = 4;
 * @return {number}
 */
proto.PToP.S2InfoRelay.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PToP.S2InfoRelay} returns this
 */
proto.PToP.S2InfoRelay.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.People.prototype.toObject = function(opt_includeInstance) {
  return proto.People.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.People} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.People.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headpic: msg.getHeadpic_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.People}
 */
proto.People.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.People;
  return proto.People.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.People} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.People}
 */
proto.People.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadpic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.People.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.People.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.People} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.People.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadpic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.People.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.People} returns this
 */
proto.People.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.People.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.People} returns this
 */
proto.People.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes headpic = 3;
 * @return {!(string|Uint8Array)}
 */
proto.People.prototype.getHeadpic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes headpic = 3;
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {string}
 */
proto.People.prototype.getHeadpic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadpic()));
};


/**
 * optional bytes headpic = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {!Uint8Array}
 */
proto.People.prototype.getHeadpic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadpic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.People} returns this
 */
proto.People.prototype.setHeadpic = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriend.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriend.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriend}
 */
proto.AddFriend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriend;
  return proto.AddFriend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriend}
 */
proto.AddFriend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriend.AToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriend.AToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriend.AToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriend.AToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    aShortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriend.AToServer}
 */
proto.AddFriend.AToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriend.AToServer;
  return proto.AddFriend.AToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriend.AToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriend.AToServer}
 */
proto.AddFriend.AToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAShortToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriend.AToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriend.AToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriend.AToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriend.AToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string A_short_token = 1;
 * @return {string}
 */
proto.AddFriend.AToServer.prototype.getAShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddFriend.AToServer} returns this
 */
proto.AddFriend.AToServer.prototype.setAShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 B_id = 2;
 * @return {number}
 */
proto.AddFriend.AToServer.prototype.getBId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AddFriend.AToServer} returns this
 */
proto.AddFriend.AToServer.prototype.setBId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriend.BToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriend.BToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriend.BToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriend.BToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    aId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    refuse: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    bShortToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriend.BToServer}
 */
proto.AddFriend.BToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriend.BToServer;
  return proto.AddFriend.BToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriend.BToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriend.BToServer}
 */
proto.AddFriend.BToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRefuse(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBShortToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriend.BToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriend.BToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriend.BToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriend.BToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRefuse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBShortToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 A_id = 1;
 * @return {number}
 */
proto.AddFriend.BToServer.prototype.getAId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AddFriend.BToServer} returns this
 */
proto.AddFriend.BToServer.prototype.setAId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool refuse = 2;
 * @return {boolean}
 */
proto.AddFriend.BToServer.prototype.getRefuse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.AddFriend.BToServer} returns this
 */
proto.AddFriend.BToServer.prototype.setRefuse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string B_short_token = 3;
 * @return {string}
 */
proto.AddFriend.BToServer.prototype.getBShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddFriend.BToServer} returns this
 */
proto.AddFriend.BToServer.prototype.setBShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriendFromOther.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriendFromOther.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriendFromOther} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromOther.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriendFromOther}
 */
proto.AddFriendFromOther.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriendFromOther;
  return proto.AddFriendFromOther.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriendFromOther} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriendFromOther}
 */
proto.AddFriendFromOther.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriendFromOther.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriendFromOther.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriendFromOther} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromOther.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AddFriendFromOther.Rsp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriendFromOther.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriendFromOther.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriendFromOther.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromOther.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.People.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriendFromOther.Rsp}
 */
proto.AddFriendFromOther.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriendFromOther.Rsp;
  return proto.AddFriendFromOther.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriendFromOther.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriendFromOther.Rsp}
 */
proto.AddFriendFromOther.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.People;
      reader.readMessage(value,proto.People.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriendFromOther.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriendFromOther.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriendFromOther.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromOther.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.People.serializeBinaryToWriter
    );
  }
};


/**
 * repeated People user = 1;
 * @return {!Array<!proto.People>}
 */
proto.AddFriendFromOther.Rsp.prototype.getUserList = function() {
  return /** @type{!Array<!proto.People>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.People, 1));
};


/**
 * @param {!Array<!proto.People>} value
 * @return {!proto.AddFriendFromOther.Rsp} returns this
*/
proto.AddFriendFromOther.Rsp.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.People=} opt_value
 * @param {number=} opt_index
 * @return {!proto.People}
 */
proto.AddFriendFromOther.Rsp.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.People, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AddFriendFromOther.Rsp} returns this
 */
proto.AddFriendFromOther.Rsp.prototype.clearUserList = function() {
  return this.setUserList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriendFromSelf.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriendFromSelf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriendFromSelf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromSelf.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriendFromSelf}
 */
proto.AddFriendFromSelf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriendFromSelf;
  return proto.AddFriendFromSelf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriendFromSelf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriendFromSelf}
 */
proto.AddFriendFromSelf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriendFromSelf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriendFromSelf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriendFromSelf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromSelf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AddFriendFromSelf.Rsp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriendFromSelf.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriendFromSelf.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriendFromSelf.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromSelf.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestsList: jspb.Message.toObjectList(msg.getRequestsList(),
    proto.AddFriendFromSelf.Rsp.RequestFromSelf.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriendFromSelf.Rsp}
 */
proto.AddFriendFromSelf.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriendFromSelf.Rsp;
  return proto.AddFriendFromSelf.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriendFromSelf.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriendFromSelf.Rsp}
 */
proto.AddFriendFromSelf.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AddFriendFromSelf.Rsp.RequestFromSelf;
      reader.readMessage(value,proto.AddFriendFromSelf.Rsp.RequestFromSelf.deserializeBinaryFromReader);
      msg.addRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriendFromSelf.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriendFromSelf.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriendFromSelf.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromSelf.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AddFriendFromSelf.Rsp.RequestFromSelf.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.toObject = function(opt_includeInstance) {
  return proto.AddFriendFromSelf.Rsp.RequestFromSelf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddFriendFromSelf.Rsp.RequestFromSelf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.toObject = function(includeInstance, msg) {
  var f, obj = {
    objUser: (f = msg.getObjUser()) && proto.People.toObject(includeInstance, f),
    status: msg.getStatus_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddFriendFromSelf.Rsp.RequestFromSelf}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddFriendFromSelf.Rsp.RequestFromSelf;
  return proto.AddFriendFromSelf.Rsp.RequestFromSelf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddFriendFromSelf.Rsp.RequestFromSelf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddFriendFromSelf.Rsp.RequestFromSelf}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.People;
      reader.readMessage(value,proto.People.deserializeBinaryFromReader);
      msg.setObjUser(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddFriendFromSelf.Rsp.RequestFromSelf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddFriendFromSelf.Rsp.RequestFromSelf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.People.serializeBinaryToWriter
    );
  }
  f = message.getStatus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional People obj_user = 1;
 * @return {?proto.People}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.getObjUser = function() {
  return /** @type{?proto.People} */ (
    jspb.Message.getWrapperField(this, proto.People, 1));
};


/**
 * @param {?proto.People|undefined} value
 * @return {!proto.AddFriendFromSelf.Rsp.RequestFromSelf} returns this
*/
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.setObjUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddFriendFromSelf.Rsp.RequestFromSelf} returns this
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.clearObjUser = function() {
  return this.setObjUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.hasObjUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes status = 2;
 * @return {!(string|Uint8Array)}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.getStatus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes status = 2;
 * This is a type-conversion wrapper around `getStatus()`
 * @return {string}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.getStatus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStatus()));
};


/**
 * optional bytes status = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStatus()`
 * @return {!Uint8Array}
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.getStatus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStatus()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AddFriendFromSelf.Rsp.RequestFromSelf} returns this
 */
proto.AddFriendFromSelf.Rsp.RequestFromSelf.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated RequestFromSelf requests = 1;
 * @return {!Array<!proto.AddFriendFromSelf.Rsp.RequestFromSelf>}
 */
proto.AddFriendFromSelf.Rsp.prototype.getRequestsList = function() {
  return /** @type{!Array<!proto.AddFriendFromSelf.Rsp.RequestFromSelf>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AddFriendFromSelf.Rsp.RequestFromSelf, 1));
};


/**
 * @param {!Array<!proto.AddFriendFromSelf.Rsp.RequestFromSelf>} value
 * @return {!proto.AddFriendFromSelf.Rsp} returns this
*/
proto.AddFriendFromSelf.Rsp.prototype.setRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AddFriendFromSelf.Rsp.RequestFromSelf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AddFriendFromSelf.Rsp.RequestFromSelf}
 */
proto.AddFriendFromSelf.Rsp.prototype.addRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AddFriendFromSelf.Rsp.RequestFromSelf, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AddFriendFromSelf.Rsp} returns this
 */
proto.AddFriendFromSelf.Rsp.prototype.clearRequestsList = function() {
  return this.setRequestsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Register.prototype.toObject = function(opt_includeInstance) {
  return proto.Register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Register.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Register}
 */
proto.Register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Register;
  return proto.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Register}
 */
proto.Register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Register.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.Register.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Register.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Register.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headpic: msg.getHeadpic_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Register.Req}
 */
proto.Register.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Register.Req;
  return proto.Register.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Register.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Register.Req}
 */
proto.Register.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadpic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Register.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Register.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Register.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Register.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadpic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Register.Req.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Register.Req} returns this
 */
proto.Register.Req.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.Register.Req.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Register.Req} returns this
 */
proto.Register.Req.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes headpic = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Register.Req.prototype.getHeadpic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes headpic = 3;
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {string}
 */
proto.Register.Req.prototype.getHeadpic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadpic()));
};


/**
 * optional bytes headpic = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {!Uint8Array}
 */
proto.Register.Req.prototype.getHeadpic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadpic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Register.Req} returns this
 */
proto.Register.Req.prototype.setHeadpic = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Register.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.Register.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Register.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Register.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Register.Res}
 */
proto.Register.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Register.Res;
  return proto.Register.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Register.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Register.Res}
 */
proto.Register.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Register.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Register.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Register.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Register.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Register.Res.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Register.Res} returns this
 */
proto.Register.Res.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Login.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Login}
 */
proto.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Login;
  return proto.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Login}
 */
proto.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Login.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.Login.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Login.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Login.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inIp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inPort: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Login.Req}
 */
proto.Login.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Login.Req;
  return proto.Login.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Login.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Login.Req}
 */
proto.Login.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Login.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Login.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Login.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Login.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInIp();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getInPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Login.Req.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Login.Req} returns this
 */
proto.Login.Req.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.Login.Req.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Login.Req} returns this
 */
proto.Login.Req.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 in_ip = 3;
 * @return {number}
 */
proto.Login.Req.prototype.getInIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Login.Req} returns this
 */
proto.Login.Req.prototype.setInIp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 in_port = 4;
 * @return {number}
 */
proto.Login.Req.prototype.getInPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Login.Req} returns this
 */
proto.Login.Req.prototype.setInPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Login.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.Login.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Login.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Login.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headpic: msg.getHeadpic_asB64(),
    shortToken: jspb.Message.getFieldWithDefault(msg, 6, ""),
    longToken: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Login.Res}
 */
proto.Login.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Login.Res;
  return proto.Login.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Login.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Login.Res}
 */
proto.Login.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadpic(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Login.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Login.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Login.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Login.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadpic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLongToken();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Login.Res.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Login.Res} returns this
 */
proto.Login.Res.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes headpic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Login.Res.prototype.getHeadpic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes headpic = 2;
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {string}
 */
proto.Login.Res.prototype.getHeadpic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadpic()));
};


/**
 * optional bytes headpic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {!Uint8Array}
 */
proto.Login.Res.prototype.getHeadpic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadpic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Login.Res} returns this
 */
proto.Login.Res.prototype.setHeadpic = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string short_token = 6;
 * @return {string}
 */
proto.Login.Res.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Login.Res} returns this
 */
proto.Login.Res.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string long_token = 7;
 * @return {string}
 */
proto.Login.Res.prototype.getLongToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Login.Res} returns this
 */
proto.Login.Res.prototype.setLongToken = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendList.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendList}
 */
proto.FriendList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendList;
  return proto.FriendList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendList}
 */
proto.FriendList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendList.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendList.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendList.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendList.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendList.Req}
 */
proto.FriendList.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendList.Req;
  return proto.FriendList.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendList.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendList.Req}
 */
proto.FriendList.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendList.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendList.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendList.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendList.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.FriendList.Req.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendList.Req} returns this
 */
proto.FriendList.Req.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FriendList.Rsp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendList.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendList.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendList.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendList.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    friendListList: jspb.Message.toObjectList(msg.getFriendListList(),
    proto.People.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendList.Rsp}
 */
proto.FriendList.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendList.Rsp;
  return proto.FriendList.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendList.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendList.Rsp}
 */
proto.FriendList.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.People;
      reader.readMessage(value,proto.People.deserializeBinaryFromReader);
      msg.addFriendList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendList.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendList.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendList.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendList.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.People.serializeBinaryToWriter
    );
  }
};


/**
 * repeated People friend_list = 1;
 * @return {!Array<!proto.People>}
 */
proto.FriendList.Rsp.prototype.getFriendListList = function() {
  return /** @type{!Array<!proto.People>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.People, 1));
};


/**
 * @param {!Array<!proto.People>} value
 * @return {!proto.FriendList.Rsp} returns this
*/
proto.FriendList.Rsp.prototype.setFriendListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.People=} opt_value
 * @param {number=} opt_index
 * @return {!proto.People}
 */
proto.FriendList.Rsp.prototype.addFriendList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.People, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FriendList.Rsp} returns this
 */
proto.FriendList.Rsp.prototype.clearFriendListList = function() {
  return this.setFriendListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UnreceivedMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.UnreceivedMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UnreceivedMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnreceivedMsg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UnreceivedMsg}
 */
proto.UnreceivedMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UnreceivedMsg;
  return proto.UnreceivedMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UnreceivedMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UnreceivedMsg}
 */
proto.UnreceivedMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UnreceivedMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UnreceivedMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UnreceivedMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnreceivedMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UnreceivedMsg.Res.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UnreceivedMsg.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.UnreceivedMsg.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UnreceivedMsg.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnreceivedMsg.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgList: jspb.Message.toObjectList(msg.getMsgList(),
    proto.UnreceivedMsg.Res.Msg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UnreceivedMsg.Res}
 */
proto.UnreceivedMsg.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UnreceivedMsg.Res;
  return proto.UnreceivedMsg.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UnreceivedMsg.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UnreceivedMsg.Res}
 */
proto.UnreceivedMsg.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UnreceivedMsg.Res.Msg;
      reader.readMessage(value,proto.UnreceivedMsg.Res.Msg.deserializeBinaryFromReader);
      msg.addMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UnreceivedMsg.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UnreceivedMsg.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UnreceivedMsg.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnreceivedMsg.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UnreceivedMsg.Res.Msg.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UnreceivedMsg.Res.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.UnreceivedMsg.Res.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UnreceivedMsg.Res.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnreceivedMsg.Res.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    otherId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UnreceivedMsg.Res.Msg}
 */
proto.UnreceivedMsg.Res.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UnreceivedMsg.Res.Msg;
  return proto.UnreceivedMsg.Res.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UnreceivedMsg.Res.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UnreceivedMsg.Res.Msg}
 */
proto.UnreceivedMsg.Res.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOtherId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UnreceivedMsg.Res.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UnreceivedMsg.Res.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UnreceivedMsg.Res.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnreceivedMsg.Res.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtherId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 other_id = 1;
 * @return {number}
 */
proto.UnreceivedMsg.Res.Msg.prototype.getOtherId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UnreceivedMsg.Res.Msg} returns this
 */
proto.UnreceivedMsg.Res.Msg.prototype.setOtherId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.UnreceivedMsg.Res.Msg.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.UnreceivedMsg.Res.Msg} returns this
 */
proto.UnreceivedMsg.Res.Msg.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.UnreceivedMsg.Res.Msg.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.UnreceivedMsg.Res.Msg} returns this
 */
proto.UnreceivedMsg.Res.Msg.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Msg msg = 1;
 * @return {!Array<!proto.UnreceivedMsg.Res.Msg>}
 */
proto.UnreceivedMsg.Res.prototype.getMsgList = function() {
  return /** @type{!Array<!proto.UnreceivedMsg.Res.Msg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UnreceivedMsg.Res.Msg, 1));
};


/**
 * @param {!Array<!proto.UnreceivedMsg.Res.Msg>} value
 * @return {!proto.UnreceivedMsg.Res} returns this
*/
proto.UnreceivedMsg.Res.prototype.setMsgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UnreceivedMsg.Res.Msg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UnreceivedMsg.Res.Msg}
 */
proto.UnreceivedMsg.Res.prototype.addMsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UnreceivedMsg.Res.Msg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.UnreceivedMsg.Res} returns this
 */
proto.UnreceivedMsg.Res.prototype.clearMsgList = function() {
  return this.setMsgList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartBeat.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartBeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartBeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartBeat}
 */
proto.HeartBeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartBeat;
  return proto.HeartBeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartBeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartBeat}
 */
proto.HeartBeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartBeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartBeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartBeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartBeat.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartBeat.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartBeat.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeat.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inIp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inPort: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartBeat.Req}
 */
proto.HeartBeat.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartBeat.Req;
  return proto.HeartBeat.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartBeat.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartBeat.Req}
 */
proto.HeartBeat.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartBeat.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartBeat.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartBeat.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeat.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInIp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.HeartBeat.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HeartBeat.Req} returns this
 */
proto.HeartBeat.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 in_ip = 2;
 * @return {number}
 */
proto.HeartBeat.Req.prototype.getInIp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartBeat.Req} returns this
 */
proto.HeartBeat.Req.prototype.setInIp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 in_port = 3;
 * @return {number}
 */
proto.HeartBeat.Req.prototype.getInPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.HeartBeat.Req} returns this
 */
proto.HeartBeat.Req.prototype.setInPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartBeat.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartBeat.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartBeat.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeat.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartBeat.Res}
 */
proto.HeartBeat.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartBeat.Res;
  return proto.HeartBeat.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartBeat.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartBeat.Res}
 */
proto.HeartBeat.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartBeat.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartBeat.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartBeat.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HeartBeat.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool alive = 1;
 * @return {boolean}
 */
proto.HeartBeat.Res.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.HeartBeat.Res} returns this
 */
proto.HeartBeat.Res.prototype.setAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetToken.prototype.toObject = function(opt_includeInstance) {
  return proto.GetToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetToken.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetToken}
 */
proto.GetToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetToken;
  return proto.GetToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetToken}
 */
proto.GetToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetToken.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.GetToken.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetToken.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetToken.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    longToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetToken.Req}
 */
proto.GetToken.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetToken.Req;
  return proto.GetToken.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetToken.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetToken.Req}
 */
proto.GetToken.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetToken.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetToken.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetToken.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetToken.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLongToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string long_token = 1;
 * @return {string}
 */
proto.GetToken.Req.prototype.getLongToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetToken.Req} returns this
 */
proto.GetToken.Req.prototype.setLongToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetToken.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.GetToken.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetToken.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetToken.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetToken.Res}
 */
proto.GetToken.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetToken.Res;
  return proto.GetToken.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetToken.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetToken.Res}
 */
proto.GetToken.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetToken.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetToken.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetToken.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetToken.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.GetToken.Res.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetToken.Res} returns this
 */
proto.GetToken.Res.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchUser.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchUser.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchUser}
 */
proto.SearchUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchUser;
  return proto.SearchUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchUser}
 */
proto.SearchUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchUser.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchUser.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchUser.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchUser.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    objId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shortToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchUser.Req}
 */
proto.SearchUser.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchUser.Req;
  return proto.SearchUser.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchUser.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchUser.Req}
 */
proto.SearchUser.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchUser.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchUser.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchUser.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchUser.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 obj_id = 1;
 * @return {number}
 */
proto.SearchUser.Req.prototype.getObjId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SearchUser.Req} returns this
 */
proto.SearchUser.Req.prototype.setObjId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string short_token = 2;
 * @return {string}
 */
proto.SearchUser.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SearchUser.Req} returns this
 */
proto.SearchUser.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SearchUser.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.SearchUser.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SearchUser.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchUser.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.People.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SearchUser.Res}
 */
proto.SearchUser.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SearchUser.Res;
  return proto.SearchUser.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SearchUser.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SearchUser.Res}
 */
proto.SearchUser.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.People;
      reader.readMessage(value,proto.People.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SearchUser.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SearchUser.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SearchUser.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SearchUser.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.People.serializeBinaryToWriter
    );
  }
};


/**
 * optional People user = 1;
 * @return {?proto.People}
 */
proto.SearchUser.Res.prototype.getUser = function() {
  return /** @type{?proto.People} */ (
    jspb.Message.getWrapperField(this, proto.People, 1));
};


/**
 * @param {?proto.People|undefined} value
 * @return {!proto.SearchUser.Res} returns this
*/
proto.SearchUser.Res.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SearchUser.Res} returns this
 */
proto.SearchUser.Res.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SearchUser.Res.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatWithServer.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatWithServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatWithServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatWithServer.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatWithServer}
 */
proto.ChatWithServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatWithServer;
  return proto.ChatWithServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatWithServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatWithServer}
 */
proto.ChatWithServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatWithServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatWithServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatWithServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatWithServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatWithServer.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatWithServer.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatWithServer.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatWithServer.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    objId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    content: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatWithServer.Req}
 */
proto.ChatWithServer.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatWithServer.Req;
  return proto.ChatWithServer.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatWithServer.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatWithServer.Req}
 */
proto.ChatWithServer.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatWithServer.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatWithServer.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatWithServer.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatWithServer.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObjId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.ChatWithServer.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatWithServer.Req} returns this
 */
proto.ChatWithServer.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 obj_id = 2;
 * @return {number}
 */
proto.ChatWithServer.Req.prototype.getObjId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatWithServer.Req} returns this
 */
proto.ChatWithServer.Req.prototype.setObjId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.ChatWithServer.Req.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatWithServer.Req} returns this
 */
proto.ChatWithServer.Req.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.ChatWithServer.Req.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatWithServer.Req} returns this
 */
proto.ChatWithServer.Req.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatWithServer.Relay.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatWithServer.Relay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatWithServer.Relay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatWithServer.Relay.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatWithServer.Relay}
 */
proto.ChatWithServer.Relay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatWithServer.Relay;
  return proto.ChatWithServer.Relay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatWithServer.Relay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatWithServer.Relay}
 */
proto.ChatWithServer.Relay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatWithServer.Relay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatWithServer.Relay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatWithServer.Relay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatWithServer.Relay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 src_id = 1;
 * @return {number}
 */
proto.ChatWithServer.Relay.prototype.getSrcId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatWithServer.Relay} returns this
 */
proto.ChatWithServer.Relay.prototype.setSrcId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.ChatWithServer.Relay.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatWithServer.Relay} returns this
 */
proto.ChatWithServer.Relay.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.ChatWithServer.Relay.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatWithServer.Relay} returns this
 */
proto.ChatWithServer.Relay.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangePassword.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangePassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangePassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangePassword.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangePassword}
 */
proto.ChangePassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangePassword;
  return proto.ChangePassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangePassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangePassword}
 */
proto.ChangePassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangePassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangePassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangePassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangePassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangePassword.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangePassword.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangePassword.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangePassword.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangePassword.Req}
 */
proto.ChangePassword.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangePassword.Req;
  return proto.ChangePassword.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangePassword.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangePassword.Req}
 */
proto.ChangePassword.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangePassword.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangePassword.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangePassword.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangePassword.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.ChangePassword.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChangePassword.Req} returns this
 */
proto.ChangePassword.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_password = 2;
 * @return {string}
 */
proto.ChangePassword.Req.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChangePassword.Req} returns this
 */
proto.ChangePassword.Req.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangePassword.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangePassword.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangePassword.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangePassword.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangePassword.Rsp}
 */
proto.ChangePassword.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangePassword.Rsp;
  return proto.ChangePassword.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangePassword.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangePassword.Rsp}
 */
proto.ChangePassword.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangePassword.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangePassword.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangePassword.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangePassword.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.ChangePassword.Rsp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ChangePassword.Rsp} returns this
 */
proto.ChangePassword.Rsp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeName.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeName}
 */
proto.ChangeName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeName;
  return proto.ChangeName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeName}
 */
proto.ChangeName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeName.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeName.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeName.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeName.Req}
 */
proto.ChangeName.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeName.Req;
  return proto.ChangeName.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeName.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeName.Req}
 */
proto.ChangeName.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeName.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeName.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeName.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.ChangeName.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChangeName.Req} returns this
 */
proto.ChangeName.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_name = 2;
 * @return {string}
 */
proto.ChangeName.Req.prototype.getNewName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChangeName.Req} returns this
 */
proto.ChangeName.Req.prototype.setNewName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeName.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeName.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeName.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeName.Rsp}
 */
proto.ChangeName.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeName.Rsp;
  return proto.ChangeName.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeName.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeName.Rsp}
 */
proto.ChangeName.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeName.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeName.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeName.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.ChangeName.Rsp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ChangeName.Rsp} returns this
 */
proto.ChangeName.Rsp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeName.RelayToFriend.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeName.RelayToFriend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeName.RelayToFriend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.RelayToFriend.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeName.RelayToFriend}
 */
proto.ChangeName.RelayToFriend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeName.RelayToFriend;
  return proto.ChangeName.RelayToFriend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeName.RelayToFriend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeName.RelayToFriend}
 */
proto.ChangeName.RelayToFriend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeName.RelayToFriend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeName.RelayToFriend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeName.RelayToFriend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeName.RelayToFriend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.ChangeName.RelayToFriend.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChangeName.RelayToFriend} returns this
 */
proto.ChangeName.RelayToFriend.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ChangeName.RelayToFriend.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChangeName.RelayToFriend} returns this
 */
proto.ChangeName.RelayToFriend.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeHeadpic.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeHeadpic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeHeadpic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeHeadpic}
 */
proto.ChangeHeadpic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeHeadpic;
  return proto.ChangeHeadpic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeHeadpic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeHeadpic}
 */
proto.ChangeHeadpic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeHeadpic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeHeadpic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeHeadpic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeHeadpic.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeHeadpic.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeHeadpic.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newHeadpic: msg.getNewHeadpic_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeHeadpic.Req}
 */
proto.ChangeHeadpic.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeHeadpic.Req;
  return proto.ChangeHeadpic.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeHeadpic.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeHeadpic.Req}
 */
proto.ChangeHeadpic.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewHeadpic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeHeadpic.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeHeadpic.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeHeadpic.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewHeadpic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.ChangeHeadpic.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChangeHeadpic.Req} returns this
 */
proto.ChangeHeadpic.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes new_headpic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ChangeHeadpic.Req.prototype.getNewHeadpic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes new_headpic = 2;
 * This is a type-conversion wrapper around `getNewHeadpic()`
 * @return {string}
 */
proto.ChangeHeadpic.Req.prototype.getNewHeadpic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewHeadpic()));
};


/**
 * optional bytes new_headpic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewHeadpic()`
 * @return {!Uint8Array}
 */
proto.ChangeHeadpic.Req.prototype.getNewHeadpic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewHeadpic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ChangeHeadpic.Req} returns this
 */
proto.ChangeHeadpic.Req.prototype.setNewHeadpic = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeHeadpic.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeHeadpic.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeHeadpic.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeHeadpic.Rsp}
 */
proto.ChangeHeadpic.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeHeadpic.Rsp;
  return proto.ChangeHeadpic.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeHeadpic.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeHeadpic.Rsp}
 */
proto.ChangeHeadpic.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeHeadpic.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeHeadpic.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeHeadpic.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.ChangeHeadpic.Rsp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ChangeHeadpic.Rsp} returns this
 */
proto.ChangeHeadpic.Rsp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChangeHeadpic.RelayToFriend.prototype.toObject = function(opt_includeInstance) {
  return proto.ChangeHeadpic.RelayToFriend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChangeHeadpic.RelayToFriend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.RelayToFriend.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headpic: msg.getHeadpic_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeHeadpic.RelayToFriend}
 */
proto.ChangeHeadpic.RelayToFriend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChangeHeadpic.RelayToFriend;
  return proto.ChangeHeadpic.RelayToFriend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeHeadpic.RelayToFriend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeHeadpic.RelayToFriend}
 */
proto.ChangeHeadpic.RelayToFriend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadpic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeHeadpic.RelayToFriend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChangeHeadpic.RelayToFriend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeHeadpic.RelayToFriend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeHeadpic.RelayToFriend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeadpic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.ChangeHeadpic.RelayToFriend.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChangeHeadpic.RelayToFriend} returns this
 */
proto.ChangeHeadpic.RelayToFriend.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes headpic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ChangeHeadpic.RelayToFriend.prototype.getHeadpic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes headpic = 2;
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {string}
 */
proto.ChangeHeadpic.RelayToFriend.prototype.getHeadpic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadpic()));
};


/**
 * optional bytes headpic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadpic()`
 * @return {!Uint8Array}
 */
proto.ChangeHeadpic.RelayToFriend.prototype.getHeadpic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadpic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ChangeHeadpic.RelayToFriend} returns this
 */
proto.ChangeHeadpic.RelayToFriend.prototype.setHeadpic = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteFriend.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteFriend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteFriend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteFriend.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteFriend}
 */
proto.DeleteFriend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteFriend;
  return proto.DeleteFriend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteFriend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteFriend}
 */
proto.DeleteFriend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteFriend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteFriend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteFriend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteFriend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteFriend.AToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteFriend.AToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteFriend.AToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteFriend.AToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    objId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteFriend.AToServer}
 */
proto.DeleteFriend.AToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteFriend.AToServer;
  return proto.DeleteFriend.AToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteFriend.AToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteFriend.AToServer}
 */
proto.DeleteFriend.AToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteFriend.AToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteFriend.AToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteFriend.AToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteFriend.AToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObjId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.DeleteFriend.AToServer.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeleteFriend.AToServer} returns this
 */
proto.DeleteFriend.AToServer.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 obj_id = 2;
 * @return {number}
 */
proto.DeleteFriend.AToServer.prototype.getObjId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeleteFriend.AToServer} returns this
 */
proto.DeleteFriend.AToServer.prototype.setObjId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeleteFriend.ServerToB.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteFriend.ServerToB.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteFriend.ServerToB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteFriend.ServerToB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteFriend.ServerToB.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteFriend.ServerToB}
 */
proto.DeleteFriend.ServerToB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteFriend.ServerToB;
  return proto.DeleteFriend.ServerToB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteFriend.ServerToB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteFriend.ServerToB}
 */
proto.DeleteFriend.ServerToB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setSrcIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteFriend.ServerToB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteFriend.ServerToB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteFriend.ServerToB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteFriend.ServerToB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcIdList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 src_id = 1;
 * @return {!Array<number>}
 */
proto.DeleteFriend.ServerToB.prototype.getSrcIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.DeleteFriend.ServerToB} returns this
 */
proto.DeleteFriend.ServerToB.prototype.setSrcIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.DeleteFriend.ServerToB} returns this
 */
proto.DeleteFriend.ServerToB.prototype.addSrcId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DeleteFriend.ServerToB} returns this
 */
proto.DeleteFriend.ServerToB.prototype.clearSrcIdList = function() {
  return this.setSrcIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRecord}
 */
proto.ChatRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRecord;
  return proto.ChatRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRecord}
 */
proto.ChatRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRecord.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRecord.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRecord.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    objId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRecord.Req}
 */
proto.ChatRecord.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRecord.Req;
  return proto.ChatRecord.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRecord.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRecord.Req}
 */
proto.ChatRecord.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRecord.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRecord.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRecord.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getObjId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.ChatRecord.Req.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatRecord.Req} returns this
 */
proto.ChatRecord.Req.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.ChatRecord.Req.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatRecord.Req} returns this
 */
proto.ChatRecord.Req.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 obj_id = 3;
 * @return {number}
 */
proto.ChatRecord.Req.prototype.getObjId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatRecord.Req} returns this
 */
proto.ChatRecord.Req.prototype.setObjId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatRecord.Rsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRecord.Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRecord.Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRecord.Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    objId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgList: jspb.Message.toObjectList(msg.getMsgList(),
    proto.ChatRecord.Rsp.Msg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRecord.Rsp}
 */
proto.ChatRecord.Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRecord.Rsp;
  return proto.ChatRecord.Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRecord.Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRecord.Rsp}
 */
proto.ChatRecord.Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjId(value);
      break;
    case 2:
      var value = new proto.ChatRecord.Rsp.Msg;
      reader.readMessage(value,proto.ChatRecord.Rsp.Msg.deserializeBinaryFromReader);
      msg.addMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRecord.Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRecord.Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRecord.Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ChatRecord.Rsp.Msg.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatRecord.Rsp.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatRecord.Rsp.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatRecord.Rsp.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.Rsp.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sender: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatRecord.Rsp.Msg}
 */
proto.ChatRecord.Rsp.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatRecord.Rsp.Msg;
  return proto.ChatRecord.Rsp.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatRecord.Rsp.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatRecord.Rsp.Msg}
 */
proto.ChatRecord.Rsp.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatRecord.Rsp.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatRecord.Rsp.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatRecord.Rsp.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatRecord.Rsp.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSender();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.ChatRecord.Rsp.Msg.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatRecord.Rsp.Msg} returns this
 */
proto.ChatRecord.Rsp.Msg.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.ChatRecord.Rsp.Msg.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatRecord.Rsp.Msg} returns this
 */
proto.ChatRecord.Rsp.Msg.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 sender = 3;
 * @return {number}
 */
proto.ChatRecord.Rsp.Msg.prototype.getSender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatRecord.Rsp.Msg} returns this
 */
proto.ChatRecord.Rsp.Msg.prototype.setSender = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 obj_id = 1;
 * @return {number}
 */
proto.ChatRecord.Rsp.prototype.getObjId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ChatRecord.Rsp} returns this
 */
proto.ChatRecord.Rsp.prototype.setObjId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Msg msg = 2;
 * @return {!Array<!proto.ChatRecord.Rsp.Msg>}
 */
proto.ChatRecord.Rsp.prototype.getMsgList = function() {
  return /** @type{!Array<!proto.ChatRecord.Rsp.Msg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatRecord.Rsp.Msg, 2));
};


/**
 * @param {!Array<!proto.ChatRecord.Rsp.Msg>} value
 * @return {!proto.ChatRecord.Rsp} returns this
*/
proto.ChatRecord.Rsp.prototype.setMsgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ChatRecord.Rsp.Msg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatRecord.Rsp.Msg}
 */
proto.ChatRecord.Rsp.prototype.addMsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ChatRecord.Rsp.Msg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChatRecord.Rsp} returns this
 */
proto.ChatRecord.Rsp.prototype.clearMsgList = function() {
  return this.setMsgList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Seen.prototype.toObject = function(opt_includeInstance) {
  return proto.Seen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Seen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Seen}
 */
proto.Seen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Seen;
  return proto.Seen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Seen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Seen}
 */
proto.Seen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Seen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Seen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Seen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Seen.AToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.Seen.AToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Seen.AToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.AToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    shortToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    objId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Seen.AToServer}
 */
proto.Seen.AToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Seen.AToServer;
  return proto.Seen.AToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Seen.AToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Seen.AToServer}
 */
proto.Seen.AToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Seen.AToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Seen.AToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Seen.AToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.AToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShortToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObjId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string short_token = 1;
 * @return {string}
 */
proto.Seen.AToServer.prototype.getShortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Seen.AToServer} returns this
 */
proto.Seen.AToServer.prototype.setShortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 obj_id = 2;
 * @return {number}
 */
proto.Seen.AToServer.prototype.getObjId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Seen.AToServer} returns this
 */
proto.Seen.AToServer.prototype.setObjId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.Seen.AToServer.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Seen.AToServer} returns this
 */
proto.Seen.AToServer.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Seen.ServerToB.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Seen.ServerToB.prototype.toObject = function(opt_includeInstance) {
  return proto.Seen.ServerToB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Seen.ServerToB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.ServerToB.toObject = function(includeInstance, msg) {
  var f, obj = {
    seenInfoList: jspb.Message.toObjectList(msg.getSeenInfoList(),
    proto.Seen.ServerToB.SeenInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Seen.ServerToB}
 */
proto.Seen.ServerToB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Seen.ServerToB;
  return proto.Seen.ServerToB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Seen.ServerToB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Seen.ServerToB}
 */
proto.Seen.ServerToB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Seen.ServerToB.SeenInfo;
      reader.readMessage(value,proto.Seen.ServerToB.SeenInfo.deserializeBinaryFromReader);
      msg.addSeenInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Seen.ServerToB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Seen.ServerToB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Seen.ServerToB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.ServerToB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeenInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Seen.ServerToB.SeenInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Seen.ServerToB.SeenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Seen.ServerToB.SeenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Seen.ServerToB.SeenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.ServerToB.SeenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Seen.ServerToB.SeenInfo}
 */
proto.Seen.ServerToB.SeenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Seen.ServerToB.SeenInfo;
  return proto.Seen.ServerToB.SeenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Seen.ServerToB.SeenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Seen.ServerToB.SeenInfo}
 */
proto.Seen.ServerToB.SeenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Seen.ServerToB.SeenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Seen.ServerToB.SeenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Seen.ServerToB.SeenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Seen.ServerToB.SeenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint32 src_id = 1;
 * @return {number}
 */
proto.Seen.ServerToB.SeenInfo.prototype.getSrcId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Seen.ServerToB.SeenInfo} returns this
 */
proto.Seen.ServerToB.SeenInfo.prototype.setSrcId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.Seen.ServerToB.SeenInfo.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Seen.ServerToB.SeenInfo} returns this
 */
proto.Seen.ServerToB.SeenInfo.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated SeenInfo seen_info = 1;
 * @return {!Array<!proto.Seen.ServerToB.SeenInfo>}
 */
proto.Seen.ServerToB.prototype.getSeenInfoList = function() {
  return /** @type{!Array<!proto.Seen.ServerToB.SeenInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Seen.ServerToB.SeenInfo, 1));
};


/**
 * @param {!Array<!proto.Seen.ServerToB.SeenInfo>} value
 * @return {!proto.Seen.ServerToB} returns this
*/
proto.Seen.ServerToB.prototype.setSeenInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Seen.ServerToB.SeenInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Seen.ServerToB.SeenInfo}
 */
proto.Seen.ServerToB.prototype.addSeenInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Seen.ServerToB.SeenInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Seen.ServerToB} returns this
 */
proto.Seen.ServerToB.prototype.clearSeenInfoList = function() {
  return this.setSeenInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Error;
  return proto.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error.Error_type} */ (reader.readEnum());
      msg.setErrorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Error.Error_type = {
  UNKNOWN_ERR: 0,
  UNKNOWN_MSG: 1,
  UNKNOWN_REG_ERR: 2,
  UNKNOWN_LOGIN_ERR: 3,
  UNKNOWN_SEARCH_ERR: 4,
  UNKNOWN_HEARTBEAT_ERR: 5,
  UNKNOWN_GETTOKEN_ERR: 6,
  UNKNOWN_ADD_ERR: 7,
  UNKNOWN_CHAT_ERR: 8,
  UNRECOGNIZE_SHORT_TOKEN: 9,
  UNRECOGNIZE_LONG_TOKEN: 10,
  USER_NO_EXIST: 11,
  ID_OR_PSW_WRONG: 12,
  UNKNOWN_FRIEND_ERR: 13,
  UNKNOWN_CHATREC_ERR: 14,
  UNKNOWN_CHANGE_ERR: 15,
  UNKNOWN_ADD_REQ_ERR: 16,
  UNKNOWN_SEEN_ERR: 17,
  UNKNOWN_DEL_ERR: 18
};

/**
 * optional Error_type error_type = 1;
 * @return {!proto.Error.Error_type}
 */
proto.Error.prototype.getErrorType = function() {
  return /** @type {!proto.Error.Error_type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Error.Error_type} value
 * @return {!proto.Error} returns this
 */
proto.Error.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ReqToServer.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]];

/**
 * @enum {number}
 */
proto.ReqToServer.ReqCase = {
  REQ_NOT_SET: 0,
  ADD_FRIEND_A_TO_SERVER: 1,
  ADD_FRIEND_B_TO_SERVER: 2,
  CHAT_WITH_SERVER_REQ: 3,
  GET_TOKEN_REQ: 4,
  HEART_BEAT_REQ: 5,
  LOGIN_REQ: 6,
  REGISTER_REQ: 7,
  SEARCH_USER_REQ: 8,
  FRIENDLIST_REQ: 9,
  CHAT_RECORD_REQ: 10,
  CHANGE_PASSWORD_REQ: 11,
  CHANGE_NAME_REQ: 12,
  CHANGE_HEADPIC_REQ: 13,
  DELETE_FRIEND_A_TO_SERVER: 14,
  SEEN_A_TO_SERVER: 15,
  A_S2_REQ: 16,
  S2_INFO_REQ: 17
};

/**
 * @return {proto.ReqToServer.ReqCase}
 */
proto.ReqToServer.prototype.getReqCase = function() {
  return /** @type {proto.ReqToServer.ReqCase} */(jspb.Message.computeOneofCase(this, proto.ReqToServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReqToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.ReqToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReqToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    addFriendAToServer: (f = msg.getAddFriendAToServer()) && proto.AddFriend.AToServer.toObject(includeInstance, f),
    addFriendBToServer: (f = msg.getAddFriendBToServer()) && proto.AddFriend.BToServer.toObject(includeInstance, f),
    chatWithServerReq: (f = msg.getChatWithServerReq()) && proto.ChatWithServer.Req.toObject(includeInstance, f),
    getTokenReq: (f = msg.getGetTokenReq()) && proto.GetToken.Req.toObject(includeInstance, f),
    heartBeatReq: (f = msg.getHeartBeatReq()) && proto.HeartBeat.Req.toObject(includeInstance, f),
    loginReq: (f = msg.getLoginReq()) && proto.Login.Req.toObject(includeInstance, f),
    registerReq: (f = msg.getRegisterReq()) && proto.Register.Req.toObject(includeInstance, f),
    searchUserReq: (f = msg.getSearchUserReq()) && proto.SearchUser.Req.toObject(includeInstance, f),
    friendlistReq: (f = msg.getFriendlistReq()) && proto.FriendList.Req.toObject(includeInstance, f),
    chatRecordReq: (f = msg.getChatRecordReq()) && proto.ChatRecord.Req.toObject(includeInstance, f),
    changePasswordReq: (f = msg.getChangePasswordReq()) && proto.ChangePassword.Req.toObject(includeInstance, f),
    changeNameReq: (f = msg.getChangeNameReq()) && proto.ChangeName.Req.toObject(includeInstance, f),
    changeHeadpicReq: (f = msg.getChangeHeadpicReq()) && proto.ChangeHeadpic.Req.toObject(includeInstance, f),
    deleteFriendAToServer: (f = msg.getDeleteFriendAToServer()) && proto.DeleteFriend.AToServer.toObject(includeInstance, f),
    seenAToServer: (f = msg.getSeenAToServer()) && proto.Seen.AToServer.toObject(includeInstance, f),
    aS2Req: (f = msg.getAS2Req()) && proto.PToP.AS2Req.toObject(includeInstance, f),
    s2InfoReq: (f = msg.getS2InfoReq()) && proto.PToP.S2InfoReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReqToServer}
 */
proto.ReqToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReqToServer;
  return proto.ReqToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReqToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReqToServer}
 */
proto.ReqToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AddFriend.AToServer;
      reader.readMessage(value,proto.AddFriend.AToServer.deserializeBinaryFromReader);
      msg.setAddFriendAToServer(value);
      break;
    case 2:
      var value = new proto.AddFriend.BToServer;
      reader.readMessage(value,proto.AddFriend.BToServer.deserializeBinaryFromReader);
      msg.setAddFriendBToServer(value);
      break;
    case 3:
      var value = new proto.ChatWithServer.Req;
      reader.readMessage(value,proto.ChatWithServer.Req.deserializeBinaryFromReader);
      msg.setChatWithServerReq(value);
      break;
    case 4:
      var value = new proto.GetToken.Req;
      reader.readMessage(value,proto.GetToken.Req.deserializeBinaryFromReader);
      msg.setGetTokenReq(value);
      break;
    case 5:
      var value = new proto.HeartBeat.Req;
      reader.readMessage(value,proto.HeartBeat.Req.deserializeBinaryFromReader);
      msg.setHeartBeatReq(value);
      break;
    case 6:
      var value = new proto.Login.Req;
      reader.readMessage(value,proto.Login.Req.deserializeBinaryFromReader);
      msg.setLoginReq(value);
      break;
    case 7:
      var value = new proto.Register.Req;
      reader.readMessage(value,proto.Register.Req.deserializeBinaryFromReader);
      msg.setRegisterReq(value);
      break;
    case 8:
      var value = new proto.SearchUser.Req;
      reader.readMessage(value,proto.SearchUser.Req.deserializeBinaryFromReader);
      msg.setSearchUserReq(value);
      break;
    case 9:
      var value = new proto.FriendList.Req;
      reader.readMessage(value,proto.FriendList.Req.deserializeBinaryFromReader);
      msg.setFriendlistReq(value);
      break;
    case 10:
      var value = new proto.ChatRecord.Req;
      reader.readMessage(value,proto.ChatRecord.Req.deserializeBinaryFromReader);
      msg.setChatRecordReq(value);
      break;
    case 11:
      var value = new proto.ChangePassword.Req;
      reader.readMessage(value,proto.ChangePassword.Req.deserializeBinaryFromReader);
      msg.setChangePasswordReq(value);
      break;
    case 12:
      var value = new proto.ChangeName.Req;
      reader.readMessage(value,proto.ChangeName.Req.deserializeBinaryFromReader);
      msg.setChangeNameReq(value);
      break;
    case 13:
      var value = new proto.ChangeHeadpic.Req;
      reader.readMessage(value,proto.ChangeHeadpic.Req.deserializeBinaryFromReader);
      msg.setChangeHeadpicReq(value);
      break;
    case 14:
      var value = new proto.DeleteFriend.AToServer;
      reader.readMessage(value,proto.DeleteFriend.AToServer.deserializeBinaryFromReader);
      msg.setDeleteFriendAToServer(value);
      break;
    case 15:
      var value = new proto.Seen.AToServer;
      reader.readMessage(value,proto.Seen.AToServer.deserializeBinaryFromReader);
      msg.setSeenAToServer(value);
      break;
    case 16:
      var value = new proto.PToP.AS2Req;
      reader.readMessage(value,proto.PToP.AS2Req.deserializeBinaryFromReader);
      msg.setAS2Req(value);
      break;
    case 17:
      var value = new proto.PToP.S2InfoReq;
      reader.readMessage(value,proto.PToP.S2InfoReq.deserializeBinaryFromReader);
      msg.setS2InfoReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReqToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReqToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReqToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddFriendAToServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AddFriend.AToServer.serializeBinaryToWriter
    );
  }
  f = message.getAddFriendBToServer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AddFriend.BToServer.serializeBinaryToWriter
    );
  }
  f = message.getChatWithServerReq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ChatWithServer.Req.serializeBinaryToWriter
    );
  }
  f = message.getGetTokenReq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.GetToken.Req.serializeBinaryToWriter
    );
  }
  f = message.getHeartBeatReq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.HeartBeat.Req.serializeBinaryToWriter
    );
  }
  f = message.getLoginReq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Login.Req.serializeBinaryToWriter
    );
  }
  f = message.getRegisterReq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Register.Req.serializeBinaryToWriter
    );
  }
  f = message.getSearchUserReq();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SearchUser.Req.serializeBinaryToWriter
    );
  }
  f = message.getFriendlistReq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.FriendList.Req.serializeBinaryToWriter
    );
  }
  f = message.getChatRecordReq();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ChatRecord.Req.serializeBinaryToWriter
    );
  }
  f = message.getChangePasswordReq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ChangePassword.Req.serializeBinaryToWriter
    );
  }
  f = message.getChangeNameReq();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ChangeName.Req.serializeBinaryToWriter
    );
  }
  f = message.getChangeHeadpicReq();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ChangeHeadpic.Req.serializeBinaryToWriter
    );
  }
  f = message.getDeleteFriendAToServer();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.DeleteFriend.AToServer.serializeBinaryToWriter
    );
  }
  f = message.getSeenAToServer();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.Seen.AToServer.serializeBinaryToWriter
    );
  }
  f = message.getAS2Req();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.PToP.AS2Req.serializeBinaryToWriter
    );
  }
  f = message.getS2InfoReq();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.PToP.S2InfoReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional AddFriend.AToServer add_friend_a_to_server = 1;
 * @return {?proto.AddFriend.AToServer}
 */
proto.ReqToServer.prototype.getAddFriendAToServer = function() {
  return /** @type{?proto.AddFriend.AToServer} */ (
    jspb.Message.getWrapperField(this, proto.AddFriend.AToServer, 1));
};


/**
 * @param {?proto.AddFriend.AToServer|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setAddFriendAToServer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearAddFriendAToServer = function() {
  return this.setAddFriendAToServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasAddFriendAToServer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AddFriend.BToServer add_friend_b_to_server = 2;
 * @return {?proto.AddFriend.BToServer}
 */
proto.ReqToServer.prototype.getAddFriendBToServer = function() {
  return /** @type{?proto.AddFriend.BToServer} */ (
    jspb.Message.getWrapperField(this, proto.AddFriend.BToServer, 2));
};


/**
 * @param {?proto.AddFriend.BToServer|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setAddFriendBToServer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearAddFriendBToServer = function() {
  return this.setAddFriendBToServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasAddFriendBToServer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChatWithServer.Req chat_with_server_req = 3;
 * @return {?proto.ChatWithServer.Req}
 */
proto.ReqToServer.prototype.getChatWithServerReq = function() {
  return /** @type{?proto.ChatWithServer.Req} */ (
    jspb.Message.getWrapperField(this, proto.ChatWithServer.Req, 3));
};


/**
 * @param {?proto.ChatWithServer.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setChatWithServerReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearChatWithServerReq = function() {
  return this.setChatWithServerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasChatWithServerReq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetToken.Req get_token_req = 4;
 * @return {?proto.GetToken.Req}
 */
proto.ReqToServer.prototype.getGetTokenReq = function() {
  return /** @type{?proto.GetToken.Req} */ (
    jspb.Message.getWrapperField(this, proto.GetToken.Req, 4));
};


/**
 * @param {?proto.GetToken.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setGetTokenReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearGetTokenReq = function() {
  return this.setGetTokenReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasGetTokenReq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HeartBeat.Req heart_beat_req = 5;
 * @return {?proto.HeartBeat.Req}
 */
proto.ReqToServer.prototype.getHeartBeatReq = function() {
  return /** @type{?proto.HeartBeat.Req} */ (
    jspb.Message.getWrapperField(this, proto.HeartBeat.Req, 5));
};


/**
 * @param {?proto.HeartBeat.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setHeartBeatReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearHeartBeatReq = function() {
  return this.setHeartBeatReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasHeartBeatReq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Login.Req login_req = 6;
 * @return {?proto.Login.Req}
 */
proto.ReqToServer.prototype.getLoginReq = function() {
  return /** @type{?proto.Login.Req} */ (
    jspb.Message.getWrapperField(this, proto.Login.Req, 6));
};


/**
 * @param {?proto.Login.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setLoginReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearLoginReq = function() {
  return this.setLoginReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasLoginReq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Register.Req register_req = 7;
 * @return {?proto.Register.Req}
 */
proto.ReqToServer.prototype.getRegisterReq = function() {
  return /** @type{?proto.Register.Req} */ (
    jspb.Message.getWrapperField(this, proto.Register.Req, 7));
};


/**
 * @param {?proto.Register.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setRegisterReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearRegisterReq = function() {
  return this.setRegisterReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasRegisterReq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SearchUser.Req search_user_req = 8;
 * @return {?proto.SearchUser.Req}
 */
proto.ReqToServer.prototype.getSearchUserReq = function() {
  return /** @type{?proto.SearchUser.Req} */ (
    jspb.Message.getWrapperField(this, proto.SearchUser.Req, 8));
};


/**
 * @param {?proto.SearchUser.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setSearchUserReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearSearchUserReq = function() {
  return this.setSearchUserReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasSearchUserReq = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional FriendList.Req friendlist_req = 9;
 * @return {?proto.FriendList.Req}
 */
proto.ReqToServer.prototype.getFriendlistReq = function() {
  return /** @type{?proto.FriendList.Req} */ (
    jspb.Message.getWrapperField(this, proto.FriendList.Req, 9));
};


/**
 * @param {?proto.FriendList.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setFriendlistReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearFriendlistReq = function() {
  return this.setFriendlistReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasFriendlistReq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ChatRecord.Req chat_record_req = 10;
 * @return {?proto.ChatRecord.Req}
 */
proto.ReqToServer.prototype.getChatRecordReq = function() {
  return /** @type{?proto.ChatRecord.Req} */ (
    jspb.Message.getWrapperField(this, proto.ChatRecord.Req, 10));
};


/**
 * @param {?proto.ChatRecord.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setChatRecordReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearChatRecordReq = function() {
  return this.setChatRecordReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasChatRecordReq = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ChangePassword.Req change_password_req = 11;
 * @return {?proto.ChangePassword.Req}
 */
proto.ReqToServer.prototype.getChangePasswordReq = function() {
  return /** @type{?proto.ChangePassword.Req} */ (
    jspb.Message.getWrapperField(this, proto.ChangePassword.Req, 11));
};


/**
 * @param {?proto.ChangePassword.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setChangePasswordReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearChangePasswordReq = function() {
  return this.setChangePasswordReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasChangePasswordReq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ChangeName.Req change_name_req = 12;
 * @return {?proto.ChangeName.Req}
 */
proto.ReqToServer.prototype.getChangeNameReq = function() {
  return /** @type{?proto.ChangeName.Req} */ (
    jspb.Message.getWrapperField(this, proto.ChangeName.Req, 12));
};


/**
 * @param {?proto.ChangeName.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setChangeNameReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearChangeNameReq = function() {
  return this.setChangeNameReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasChangeNameReq = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ChangeHeadpic.Req change_headpic_req = 13;
 * @return {?proto.ChangeHeadpic.Req}
 */
proto.ReqToServer.prototype.getChangeHeadpicReq = function() {
  return /** @type{?proto.ChangeHeadpic.Req} */ (
    jspb.Message.getWrapperField(this, proto.ChangeHeadpic.Req, 13));
};


/**
 * @param {?proto.ChangeHeadpic.Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setChangeHeadpicReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearChangeHeadpicReq = function() {
  return this.setChangeHeadpicReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasChangeHeadpicReq = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional DeleteFriend.AToServer delete_friend_a_to_server = 14;
 * @return {?proto.DeleteFriend.AToServer}
 */
proto.ReqToServer.prototype.getDeleteFriendAToServer = function() {
  return /** @type{?proto.DeleteFriend.AToServer} */ (
    jspb.Message.getWrapperField(this, proto.DeleteFriend.AToServer, 14));
};


/**
 * @param {?proto.DeleteFriend.AToServer|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setDeleteFriendAToServer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearDeleteFriendAToServer = function() {
  return this.setDeleteFriendAToServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasDeleteFriendAToServer = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Seen.AToServer seen_a_to_server = 15;
 * @return {?proto.Seen.AToServer}
 */
proto.ReqToServer.prototype.getSeenAToServer = function() {
  return /** @type{?proto.Seen.AToServer} */ (
    jspb.Message.getWrapperField(this, proto.Seen.AToServer, 15));
};


/**
 * @param {?proto.Seen.AToServer|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setSeenAToServer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearSeenAToServer = function() {
  return this.setSeenAToServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasSeenAToServer = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional PToP.AS2Req a_s2_req = 16;
 * @return {?proto.PToP.AS2Req}
 */
proto.ReqToServer.prototype.getAS2Req = function() {
  return /** @type{?proto.PToP.AS2Req} */ (
    jspb.Message.getWrapperField(this, proto.PToP.AS2Req, 16));
};


/**
 * @param {?proto.PToP.AS2Req|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setAS2Req = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearAS2Req = function() {
  return this.setAS2Req(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasAS2Req = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PToP.S2InfoReq s2_info_req = 17;
 * @return {?proto.PToP.S2InfoReq}
 */
proto.ReqToServer.prototype.getS2InfoReq = function() {
  return /** @type{?proto.PToP.S2InfoReq} */ (
    jspb.Message.getWrapperField(this, proto.PToP.S2InfoReq, 17));
};


/**
 * @param {?proto.PToP.S2InfoReq|undefined} value
 * @return {!proto.ReqToServer} returns this
*/
proto.ReqToServer.prototype.setS2InfoReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.ReqToServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReqToServer} returns this
 */
proto.ReqToServer.prototype.clearS2InfoReq = function() {
  return this.setS2InfoReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReqToServer.prototype.hasS2InfoReq = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RspToClient.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]];

/**
 * @enum {number}
 */
proto.RspToClient.RspCase = {
  RSP_NOT_SET: 0,
  CHAT_WITH_SERVER_RELAY: 3,
  GET_TOKEN_RES: 4,
  HEART_BEAT_RES: 5,
  LOGIN_RES: 6,
  REGISTER_RES: 7,
  SEARCH_USER_RES: 8,
  ERROR: 9,
  FRIENDLIST_RES: 10,
  CHAT_RECORD_RSP: 11,
  ADD_FRIEND_FROM_OTHER_RSP: 12,
  ADD_FRIEND_FROM_SELF_RSP: 13,
  UNRECEIVED_MSG_RES: 14,
  CHANGE_PASSWORD_RSP: 15,
  CHANGE_NAME_RSP: 16,
  CHANGE_HEADPIC_RSP: 17,
  DELETE_FRIEND_SERVER_TO_B: 18,
  SEEN_SERVER_TO_B: 19,
  CHANGE_NAME_RELAY: 20,
  CHANGE_HEADPIC_RELAY: 21,
  S1_RSP: 22,
  S2_RSP: 23,
  S2_B_RELAY: 24,
  S2_INFO_RSP: 25
};

/**
 * @return {proto.RspToClient.RspCase}
 */
proto.RspToClient.prototype.getRspCase = function() {
  return /** @type {proto.RspToClient.RspCase} */(jspb.Message.computeOneofCase(this, proto.RspToClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RspToClient.prototype.toObject = function(opt_includeInstance) {
  return proto.RspToClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RspToClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RspToClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatWithServerRelay: (f = msg.getChatWithServerRelay()) && proto.ChatWithServer.Relay.toObject(includeInstance, f),
    getTokenRes: (f = msg.getGetTokenRes()) && proto.GetToken.Res.toObject(includeInstance, f),
    heartBeatRes: (f = msg.getHeartBeatRes()) && proto.HeartBeat.Res.toObject(includeInstance, f),
    loginRes: (f = msg.getLoginRes()) && proto.Login.Res.toObject(includeInstance, f),
    registerRes: (f = msg.getRegisterRes()) && proto.Register.Res.toObject(includeInstance, f),
    searchUserRes: (f = msg.getSearchUserRes()) && proto.SearchUser.Res.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.Error.toObject(includeInstance, f),
    friendlistRes: (f = msg.getFriendlistRes()) && proto.FriendList.Rsp.toObject(includeInstance, f),
    chatRecordRsp: (f = msg.getChatRecordRsp()) && proto.ChatRecord.Rsp.toObject(includeInstance, f),
    addFriendFromOtherRsp: (f = msg.getAddFriendFromOtherRsp()) && proto.AddFriendFromOther.Rsp.toObject(includeInstance, f),
    addFriendFromSelfRsp: (f = msg.getAddFriendFromSelfRsp()) && proto.AddFriendFromSelf.Rsp.toObject(includeInstance, f),
    unreceivedMsgRes: (f = msg.getUnreceivedMsgRes()) && proto.UnreceivedMsg.Res.toObject(includeInstance, f),
    changePasswordRsp: (f = msg.getChangePasswordRsp()) && proto.ChangePassword.Rsp.toObject(includeInstance, f),
    changeNameRsp: (f = msg.getChangeNameRsp()) && proto.ChangeName.Rsp.toObject(includeInstance, f),
    changeHeadpicRsp: (f = msg.getChangeHeadpicRsp()) && proto.ChangeHeadpic.Rsp.toObject(includeInstance, f),
    deleteFriendServerToB: (f = msg.getDeleteFriendServerToB()) && proto.DeleteFriend.ServerToB.toObject(includeInstance, f),
    seenServerToB: (f = msg.getSeenServerToB()) && proto.Seen.ServerToB.toObject(includeInstance, f),
    changeNameRelay: (f = msg.getChangeNameRelay()) && proto.ChangeName.RelayToFriend.toObject(includeInstance, f),
    changeHeadpicRelay: (f = msg.getChangeHeadpicRelay()) && proto.ChangeHeadpic.RelayToFriend.toObject(includeInstance, f),
    s1Rsp: (f = msg.getS1Rsp()) && proto.PToP.S1Rsp.toObject(includeInstance, f),
    s2Rsp: (f = msg.getS2Rsp()) && proto.PToP.S2ARsp.toObject(includeInstance, f),
    s2BRelay: (f = msg.getS2BRelay()) && proto.PToP.S2BRelay.toObject(includeInstance, f),
    s2InfoRsp: (f = msg.getS2InfoRsp()) && proto.PToP.S2InfoRelay.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RspToClient}
 */
proto.RspToClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RspToClient;
  return proto.RspToClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RspToClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RspToClient}
 */
proto.RspToClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.ChatWithServer.Relay;
      reader.readMessage(value,proto.ChatWithServer.Relay.deserializeBinaryFromReader);
      msg.setChatWithServerRelay(value);
      break;
    case 4:
      var value = new proto.GetToken.Res;
      reader.readMessage(value,proto.GetToken.Res.deserializeBinaryFromReader);
      msg.setGetTokenRes(value);
      break;
    case 5:
      var value = new proto.HeartBeat.Res;
      reader.readMessage(value,proto.HeartBeat.Res.deserializeBinaryFromReader);
      msg.setHeartBeatRes(value);
      break;
    case 6:
      var value = new proto.Login.Res;
      reader.readMessage(value,proto.Login.Res.deserializeBinaryFromReader);
      msg.setLoginRes(value);
      break;
    case 7:
      var value = new proto.Register.Res;
      reader.readMessage(value,proto.Register.Res.deserializeBinaryFromReader);
      msg.setRegisterRes(value);
      break;
    case 8:
      var value = new proto.SearchUser.Res;
      reader.readMessage(value,proto.SearchUser.Res.deserializeBinaryFromReader);
      msg.setSearchUserRes(value);
      break;
    case 9:
      var value = new proto.Error;
      reader.readMessage(value,proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 10:
      var value = new proto.FriendList.Rsp;
      reader.readMessage(value,proto.FriendList.Rsp.deserializeBinaryFromReader);
      msg.setFriendlistRes(value);
      break;
    case 11:
      var value = new proto.ChatRecord.Rsp;
      reader.readMessage(value,proto.ChatRecord.Rsp.deserializeBinaryFromReader);
      msg.setChatRecordRsp(value);
      break;
    case 12:
      var value = new proto.AddFriendFromOther.Rsp;
      reader.readMessage(value,proto.AddFriendFromOther.Rsp.deserializeBinaryFromReader);
      msg.setAddFriendFromOtherRsp(value);
      break;
    case 13:
      var value = new proto.AddFriendFromSelf.Rsp;
      reader.readMessage(value,proto.AddFriendFromSelf.Rsp.deserializeBinaryFromReader);
      msg.setAddFriendFromSelfRsp(value);
      break;
    case 14:
      var value = new proto.UnreceivedMsg.Res;
      reader.readMessage(value,proto.UnreceivedMsg.Res.deserializeBinaryFromReader);
      msg.setUnreceivedMsgRes(value);
      break;
    case 15:
      var value = new proto.ChangePassword.Rsp;
      reader.readMessage(value,proto.ChangePassword.Rsp.deserializeBinaryFromReader);
      msg.setChangePasswordRsp(value);
      break;
    case 16:
      var value = new proto.ChangeName.Rsp;
      reader.readMessage(value,proto.ChangeName.Rsp.deserializeBinaryFromReader);
      msg.setChangeNameRsp(value);
      break;
    case 17:
      var value = new proto.ChangeHeadpic.Rsp;
      reader.readMessage(value,proto.ChangeHeadpic.Rsp.deserializeBinaryFromReader);
      msg.setChangeHeadpicRsp(value);
      break;
    case 18:
      var value = new proto.DeleteFriend.ServerToB;
      reader.readMessage(value,proto.DeleteFriend.ServerToB.deserializeBinaryFromReader);
      msg.setDeleteFriendServerToB(value);
      break;
    case 19:
      var value = new proto.Seen.ServerToB;
      reader.readMessage(value,proto.Seen.ServerToB.deserializeBinaryFromReader);
      msg.setSeenServerToB(value);
      break;
    case 20:
      var value = new proto.ChangeName.RelayToFriend;
      reader.readMessage(value,proto.ChangeName.RelayToFriend.deserializeBinaryFromReader);
      msg.setChangeNameRelay(value);
      break;
    case 21:
      var value = new proto.ChangeHeadpic.RelayToFriend;
      reader.readMessage(value,proto.ChangeHeadpic.RelayToFriend.deserializeBinaryFromReader);
      msg.setChangeHeadpicRelay(value);
      break;
    case 22:
      var value = new proto.PToP.S1Rsp;
      reader.readMessage(value,proto.PToP.S1Rsp.deserializeBinaryFromReader);
      msg.setS1Rsp(value);
      break;
    case 23:
      var value = new proto.PToP.S2ARsp;
      reader.readMessage(value,proto.PToP.S2ARsp.deserializeBinaryFromReader);
      msg.setS2Rsp(value);
      break;
    case 24:
      var value = new proto.PToP.S2BRelay;
      reader.readMessage(value,proto.PToP.S2BRelay.deserializeBinaryFromReader);
      msg.setS2BRelay(value);
      break;
    case 25:
      var value = new proto.PToP.S2InfoRelay;
      reader.readMessage(value,proto.PToP.S2InfoRelay.deserializeBinaryFromReader);
      msg.setS2InfoRsp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RspToClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RspToClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RspToClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RspToClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChatWithServerRelay();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ChatWithServer.Relay.serializeBinaryToWriter
    );
  }
  f = message.getGetTokenRes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.GetToken.Res.serializeBinaryToWriter
    );
  }
  f = message.getHeartBeatRes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.HeartBeat.Res.serializeBinaryToWriter
    );
  }
  f = message.getLoginRes();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Login.Res.serializeBinaryToWriter
    );
  }
  f = message.getRegisterRes();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Register.Res.serializeBinaryToWriter
    );
  }
  f = message.getSearchUserRes();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SearchUser.Res.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Error.serializeBinaryToWriter
    );
  }
  f = message.getFriendlistRes();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.FriendList.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getChatRecordRsp();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ChatRecord.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getAddFriendFromOtherRsp();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.AddFriendFromOther.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getAddFriendFromSelfRsp();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.AddFriendFromSelf.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getUnreceivedMsgRes();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.UnreceivedMsg.Res.serializeBinaryToWriter
    );
  }
  f = message.getChangePasswordRsp();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.ChangePassword.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getChangeNameRsp();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.ChangeName.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getChangeHeadpicRsp();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.ChangeHeadpic.Rsp.serializeBinaryToWriter
    );
  }
  f = message.getDeleteFriendServerToB();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.DeleteFriend.ServerToB.serializeBinaryToWriter
    );
  }
  f = message.getSeenServerToB();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.Seen.ServerToB.serializeBinaryToWriter
    );
  }
  f = message.getChangeNameRelay();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ChangeName.RelayToFriend.serializeBinaryToWriter
    );
  }
  f = message.getChangeHeadpicRelay();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.ChangeHeadpic.RelayToFriend.serializeBinaryToWriter
    );
  }
  f = message.getS1Rsp();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.PToP.S1Rsp.serializeBinaryToWriter
    );
  }
  f = message.getS2Rsp();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.PToP.S2ARsp.serializeBinaryToWriter
    );
  }
  f = message.getS2BRelay();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.PToP.S2BRelay.serializeBinaryToWriter
    );
  }
  f = message.getS2InfoRsp();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.PToP.S2InfoRelay.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatWithServer.Relay chat_with_server_relay = 3;
 * @return {?proto.ChatWithServer.Relay}
 */
proto.RspToClient.prototype.getChatWithServerRelay = function() {
  return /** @type{?proto.ChatWithServer.Relay} */ (
    jspb.Message.getWrapperField(this, proto.ChatWithServer.Relay, 3));
};


/**
 * @param {?proto.ChatWithServer.Relay|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChatWithServerRelay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChatWithServerRelay = function() {
  return this.setChatWithServerRelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChatWithServerRelay = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GetToken.Res get_token_res = 4;
 * @return {?proto.GetToken.Res}
 */
proto.RspToClient.prototype.getGetTokenRes = function() {
  return /** @type{?proto.GetToken.Res} */ (
    jspb.Message.getWrapperField(this, proto.GetToken.Res, 4));
};


/**
 * @param {?proto.GetToken.Res|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setGetTokenRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearGetTokenRes = function() {
  return this.setGetTokenRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasGetTokenRes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HeartBeat.Res heart_beat_res = 5;
 * @return {?proto.HeartBeat.Res}
 */
proto.RspToClient.prototype.getHeartBeatRes = function() {
  return /** @type{?proto.HeartBeat.Res} */ (
    jspb.Message.getWrapperField(this, proto.HeartBeat.Res, 5));
};


/**
 * @param {?proto.HeartBeat.Res|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setHeartBeatRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearHeartBeatRes = function() {
  return this.setHeartBeatRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasHeartBeatRes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Login.Res login_res = 6;
 * @return {?proto.Login.Res}
 */
proto.RspToClient.prototype.getLoginRes = function() {
  return /** @type{?proto.Login.Res} */ (
    jspb.Message.getWrapperField(this, proto.Login.Res, 6));
};


/**
 * @param {?proto.Login.Res|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setLoginRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearLoginRes = function() {
  return this.setLoginRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasLoginRes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Register.Res register_res = 7;
 * @return {?proto.Register.Res}
 */
proto.RspToClient.prototype.getRegisterRes = function() {
  return /** @type{?proto.Register.Res} */ (
    jspb.Message.getWrapperField(this, proto.Register.Res, 7));
};


/**
 * @param {?proto.Register.Res|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setRegisterRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearRegisterRes = function() {
  return this.setRegisterRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasRegisterRes = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SearchUser.Res search_user_res = 8;
 * @return {?proto.SearchUser.Res}
 */
proto.RspToClient.prototype.getSearchUserRes = function() {
  return /** @type{?proto.SearchUser.Res} */ (
    jspb.Message.getWrapperField(this, proto.SearchUser.Res, 8));
};


/**
 * @param {?proto.SearchUser.Res|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setSearchUserRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearSearchUserRes = function() {
  return this.setSearchUserRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasSearchUserRes = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Error error = 9;
 * @return {?proto.Error}
 */
proto.RspToClient.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.Error, 9));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional FriendList.Rsp friendlist_res = 10;
 * @return {?proto.FriendList.Rsp}
 */
proto.RspToClient.prototype.getFriendlistRes = function() {
  return /** @type{?proto.FriendList.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.FriendList.Rsp, 10));
};


/**
 * @param {?proto.FriendList.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setFriendlistRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearFriendlistRes = function() {
  return this.setFriendlistRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasFriendlistRes = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ChatRecord.Rsp chat_record_rsp = 11;
 * @return {?proto.ChatRecord.Rsp}
 */
proto.RspToClient.prototype.getChatRecordRsp = function() {
  return /** @type{?proto.ChatRecord.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.ChatRecord.Rsp, 11));
};


/**
 * @param {?proto.ChatRecord.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChatRecordRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChatRecordRsp = function() {
  return this.setChatRecordRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChatRecordRsp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AddFriendFromOther.Rsp add_friend_from_other_rsp = 12;
 * @return {?proto.AddFriendFromOther.Rsp}
 */
proto.RspToClient.prototype.getAddFriendFromOtherRsp = function() {
  return /** @type{?proto.AddFriendFromOther.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.AddFriendFromOther.Rsp, 12));
};


/**
 * @param {?proto.AddFriendFromOther.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setAddFriendFromOtherRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearAddFriendFromOtherRsp = function() {
  return this.setAddFriendFromOtherRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasAddFriendFromOtherRsp = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional AddFriendFromSelf.Rsp add_friend_from_self_rsp = 13;
 * @return {?proto.AddFriendFromSelf.Rsp}
 */
proto.RspToClient.prototype.getAddFriendFromSelfRsp = function() {
  return /** @type{?proto.AddFriendFromSelf.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.AddFriendFromSelf.Rsp, 13));
};


/**
 * @param {?proto.AddFriendFromSelf.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setAddFriendFromSelfRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearAddFriendFromSelfRsp = function() {
  return this.setAddFriendFromSelfRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasAddFriendFromSelfRsp = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional UnreceivedMsg.Res unreceived_msg_res = 14;
 * @return {?proto.UnreceivedMsg.Res}
 */
proto.RspToClient.prototype.getUnreceivedMsgRes = function() {
  return /** @type{?proto.UnreceivedMsg.Res} */ (
    jspb.Message.getWrapperField(this, proto.UnreceivedMsg.Res, 14));
};


/**
 * @param {?proto.UnreceivedMsg.Res|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setUnreceivedMsgRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearUnreceivedMsgRes = function() {
  return this.setUnreceivedMsgRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasUnreceivedMsgRes = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ChangePassword.Rsp change_password_rsp = 15;
 * @return {?proto.ChangePassword.Rsp}
 */
proto.RspToClient.prototype.getChangePasswordRsp = function() {
  return /** @type{?proto.ChangePassword.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.ChangePassword.Rsp, 15));
};


/**
 * @param {?proto.ChangePassword.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChangePasswordRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChangePasswordRsp = function() {
  return this.setChangePasswordRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChangePasswordRsp = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ChangeName.Rsp change_name_rsp = 16;
 * @return {?proto.ChangeName.Rsp}
 */
proto.RspToClient.prototype.getChangeNameRsp = function() {
  return /** @type{?proto.ChangeName.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.ChangeName.Rsp, 16));
};


/**
 * @param {?proto.ChangeName.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChangeNameRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChangeNameRsp = function() {
  return this.setChangeNameRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChangeNameRsp = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ChangeHeadpic.Rsp change_headpic_rsp = 17;
 * @return {?proto.ChangeHeadpic.Rsp}
 */
proto.RspToClient.prototype.getChangeHeadpicRsp = function() {
  return /** @type{?proto.ChangeHeadpic.Rsp} */ (
    jspb.Message.getWrapperField(this, proto.ChangeHeadpic.Rsp, 17));
};


/**
 * @param {?proto.ChangeHeadpic.Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChangeHeadpicRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChangeHeadpicRsp = function() {
  return this.setChangeHeadpicRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChangeHeadpicRsp = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional DeleteFriend.ServerToB delete_friend_server_to_b = 18;
 * @return {?proto.DeleteFriend.ServerToB}
 */
proto.RspToClient.prototype.getDeleteFriendServerToB = function() {
  return /** @type{?proto.DeleteFriend.ServerToB} */ (
    jspb.Message.getWrapperField(this, proto.DeleteFriend.ServerToB, 18));
};


/**
 * @param {?proto.DeleteFriend.ServerToB|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setDeleteFriendServerToB = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearDeleteFriendServerToB = function() {
  return this.setDeleteFriendServerToB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasDeleteFriendServerToB = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Seen.ServerToB seen_server_to_b = 19;
 * @return {?proto.Seen.ServerToB}
 */
proto.RspToClient.prototype.getSeenServerToB = function() {
  return /** @type{?proto.Seen.ServerToB} */ (
    jspb.Message.getWrapperField(this, proto.Seen.ServerToB, 19));
};


/**
 * @param {?proto.Seen.ServerToB|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setSeenServerToB = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearSeenServerToB = function() {
  return this.setSeenServerToB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasSeenServerToB = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ChangeName.RelayToFriend change_name_relay = 20;
 * @return {?proto.ChangeName.RelayToFriend}
 */
proto.RspToClient.prototype.getChangeNameRelay = function() {
  return /** @type{?proto.ChangeName.RelayToFriend} */ (
    jspb.Message.getWrapperField(this, proto.ChangeName.RelayToFriend, 20));
};


/**
 * @param {?proto.ChangeName.RelayToFriend|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChangeNameRelay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChangeNameRelay = function() {
  return this.setChangeNameRelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChangeNameRelay = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ChangeHeadpic.RelayToFriend change_headpic_relay = 21;
 * @return {?proto.ChangeHeadpic.RelayToFriend}
 */
proto.RspToClient.prototype.getChangeHeadpicRelay = function() {
  return /** @type{?proto.ChangeHeadpic.RelayToFriend} */ (
    jspb.Message.getWrapperField(this, proto.ChangeHeadpic.RelayToFriend, 21));
};


/**
 * @param {?proto.ChangeHeadpic.RelayToFriend|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setChangeHeadpicRelay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearChangeHeadpicRelay = function() {
  return this.setChangeHeadpicRelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasChangeHeadpicRelay = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional PToP.S1Rsp s1_rsp = 22;
 * @return {?proto.PToP.S1Rsp}
 */
proto.RspToClient.prototype.getS1Rsp = function() {
  return /** @type{?proto.PToP.S1Rsp} */ (
    jspb.Message.getWrapperField(this, proto.PToP.S1Rsp, 22));
};


/**
 * @param {?proto.PToP.S1Rsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setS1Rsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearS1Rsp = function() {
  return this.setS1Rsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasS1Rsp = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional PToP.S2ARsp s2_rsp = 23;
 * @return {?proto.PToP.S2ARsp}
 */
proto.RspToClient.prototype.getS2Rsp = function() {
  return /** @type{?proto.PToP.S2ARsp} */ (
    jspb.Message.getWrapperField(this, proto.PToP.S2ARsp, 23));
};


/**
 * @param {?proto.PToP.S2ARsp|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setS2Rsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearS2Rsp = function() {
  return this.setS2Rsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasS2Rsp = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional PToP.S2BRelay s2_b_relay = 24;
 * @return {?proto.PToP.S2BRelay}
 */
proto.RspToClient.prototype.getS2BRelay = function() {
  return /** @type{?proto.PToP.S2BRelay} */ (
    jspb.Message.getWrapperField(this, proto.PToP.S2BRelay, 24));
};


/**
 * @param {?proto.PToP.S2BRelay|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setS2BRelay = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearS2BRelay = function() {
  return this.setS2BRelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasS2BRelay = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional PToP.S2InfoRelay s2_info_rsp = 25;
 * @return {?proto.PToP.S2InfoRelay}
 */
proto.RspToClient.prototype.getS2InfoRsp = function() {
  return /** @type{?proto.PToP.S2InfoRelay} */ (
    jspb.Message.getWrapperField(this, proto.PToP.S2InfoRelay, 25));
};


/**
 * @param {?proto.PToP.S2InfoRelay|undefined} value
 * @return {!proto.RspToClient} returns this
*/
proto.RspToClient.prototype.setS2InfoRsp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.RspToClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RspToClient} returns this
 */
proto.RspToClient.prototype.clearS2InfoRsp = function() {
  return this.setS2InfoRsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RspToClient.prototype.hasS2InfoRsp = function() {
  return jspb.Message.getField(this, 25) != null;
};


goog.object.extend(exports, proto);
